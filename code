#include <stdio.h> 
#include <stdlib.h> 
struct Graph { 
    int V; 
    int** adj; 
}; 
struct Graph* createGraph(int V) { 
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph)); 
    graph->V = V; 
    graph->adj = (int**)malloc(V * sizeof(int*)); 
    for (int i = 0; i < V; i++) { 
        graph->adj[i] = (int*)malloc(V * sizeof(int)); 
        for (int j = 0; j < V; j++) { 
            graph->adj[i][j] = 0; 
        } 
    } 
    return graph; 
} 
void addEdge(struct Graph* graph, int v, int w) { 
    graph->adj[v][w] = 1; 
    graph->adj[w][v] = 1; 
} 
void greedyColoring(struct Graph* graph) { 
    int V = graph->V; 
    int* result = (int*)malloc(V * sizeof(int)); 
    int* available = (int*)malloc(V * sizeof(int)); 
    for (int i = 0; i < V; i++) { 
        result[i] = -1; 
        available[i] = 0; 
    } 
    result[0] = 0; 
    for (int u = 1; u < V; u++) { 
        for (int v = 0; v < V; v++) { 
            if (graph->adj[u][v] && result[v] != -1) { 
                available[result[v]] = 1; 
            } 
        } 
        int cr; 
        for (cr = 0; cr < V; cr++) { 
            if (available[cr] == 0) { 
                break; 
            } 
        } 
        result[u] = cr; 
        for (int v = 0; v < V; v++) { 
            if (graph->adj[u][v] && result[v] != -1) { 
                available[result[v]] = 0; 
            } 
        } 
    } 
    printf("Vertex \t Color\n"); 
    for (int u = 0; u < V; u++) { 
        printf("%d \t %d\n", u, result[u]); 
    } 
} 
 
int main() { 
int V = 5; 
struct Graph* graph = createGraph(V); 
addEdge(graph, 0, 1); 
addEdge(graph, 0, 2); 
addEdge(graph, 1, 2); 
addEdge(graph, 1, 3); 
addEdge(graph, 2, 3); 
addEdge(graph, 3, 4); 
printf("Coloring of graph vertices: \n"); 
greedyColoring(graph); 
return 0; 
} 
